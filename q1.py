"""

Вопрос №1

На языке Python написать алгоритм (функцию) определения четности целого числа, который будет аналогичен нижеприведенному по функциональности, но отличен по своей сути. Объяснить плюсы и минусы обеих реализаций.

Пример:

def isEven(value):

      return value % 2 == 0
"""
from timeit import timeit


def isEven1(value):
    """
    Первая функция - проверка четности с помощью отстатка от деления числа на 2
    """
    return value % 2 == 0


def isEven2(value):
    """
    Вторая функция - проверка младшего бита в бинарной записи числа.
    Например, если взять чилсо 5 -
    в двоичной форме записи 0b101 - значение младшего бита - 1.
    Число 6 -в двичной форме 0b110 - значение младшего бита - 0.
    Работа с побитывыми операциями занимает меньше времени,
    чем сложная, для процессора, операция деления.
    """
    return value & 1 == 0


# Проверим обе функции на их работоспособность
val1 = 302940324891241
val2 = 984258402932222
print(isEven1(val1))
print(isEven1(val2))
print(isEven2(val1))
print(isEven2(val2))


# Замерим время выполнения выпонения для деления
code1 = "123123323232321231234839449324789981786234786123746178236423462784612634237461264624623462134612346123462186823671286 % 2 == 0"

time1 = timeit(code1, number=100) / 100

# Замерим время выполнения выпонения для побитововой конъюкции
code2 = "123123323232321231234839449324789981786234786123746178236423462784612634237461264624623462134612346123462186823671286&1==0"
time2 = timeit(code2, number=100) / 100

print(time1)
print(time2)
# вывод - побитовая конъюкция работает быстрее
